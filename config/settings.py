"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--_&locmu=#ad(oyna294$1-r-_cw*&d8hghg6i&6z^-7=a@d%+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'news',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',

    'django_apscheduler',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 0,
        },
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Этого раздела может не быть, добавьте его в указанном виде.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Ранее мы устанавливали значение для этой переменной,
# но всё равно убедитесь в её наличии.
SITE_ID = 1

# Несколько полей для allauth авторизации/регистрации по email
ACCOUNT_EMAIL_REQUIRED = True  # требуется мыло
ACCOUNT_UNIQUE_EMAIL = True  # и оно уникально
ACCOUNT_USERNAME_REQUIRED = False  # а вот юзернэйм не особо нужен
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # аутентификация по мылу
ACCOUNT_EMAIL_VERIFICATION = 'none'  # проверок не нужно, т.к. тестовый проект

LOGIN_REDIRECT_URL = '/news'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

# Константы для рассылки сообщений
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # вместо реальной рассылки писем ограничимся выводом в консоль, чтобы не забанили за спамерство
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Настройки для рассылки почты группам
SERVER_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
ADMINS = (
    ('anton', 'ant.on@non-existen-mail.ru'),
)


# Домен сайта для конструирования ссылок для рассылок
SITE_URL = 'http://127.0.0.1:8000'


# Настройки для Celery
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


# настройки кэширования
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
        'TIMEOUT': 300,
    }
}


# логирование
LOGGING = {
    'version': 1,
    'disable_existing_logger': False,
    'loggers': {
        'news': {
            'level': 'DEBUG',
            'handlers': ['console_debug', 'console_warning', 'console_error', 'file_info', 'file_error', 'file_security', 'mail_error'],
        },
        'django': {
            'level': 'DEBUG',  # здесь включить DEBUG
            'handlers': ['console_debug', 'console_warning', 'file_info'],
        },
        'django.request': {
            'level': 'ERROR',
            'handlers': ['file_error', 'mail_error'],
            'propagate': False,
        },
        'django.server': {
            'level': 'ERROR',
            'handlers': ['file_error', 'mail_error'],
            'propagate': False,
        },
        'django.template': {
            'level': 'ERROR',
            'handlers': ['file_error'],
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['file_error'],
            'propagate': False,
        },
        'django.security': {
            'level': 'INFO',
            'handlers': ['file_security'],
            'propagate': False,
        },
    },
    'handlers': {
        'console_debug': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'for_debug',
        },
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'for_warning',
        },
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'for_error',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'for_info_file',
            'filename': 'log/general.log',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'for_error_file',
            'filename': 'log/errors.log',
        },
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'for_info_file',
            'filename': 'log/security.log',
        },
        'mail_error': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'for_error_file',
        },
    },
    'formatters': {
        'for_debug': {
            'format': '%(asctime)s %(levelname)s %(message)s',
            'datetime': '%Y.%m.%d %H:%M:%S',
        },
        'for_warning': {
            'format': '%(asctime)s %(levelname)s\n\tPathName=[%(pathname)s]\n\tMessage=[%(message)s]',
            'datetime': '%Y.%m.%d %H:%M:%S',
        },
        'for_error': {
            'format': '%(asctime)s %(levelname)s\n\tPathName=[%(pathname)s]\n\tMessage=[%(message)s]\n\t\t%(exc_info)s',
            'datetime': '%Y.%m.%d %H:%M:%S',
        },
        'for_info_file': {
            'format': '%(asctime)s %(levelname)s %(module)-12s %(message)s',
            'datetime': '%Y.%m.%d %H:%M:%S',
        },
        'for_error_file': {
            'format': '%(asctime)s %(levelname)s %(message)s\n\tPathName=[%(pathname)s]\n\t%(exc_info)s',
            'datetime': '%Y.%m.%d %H:%M:%S',
        },
    },
}
